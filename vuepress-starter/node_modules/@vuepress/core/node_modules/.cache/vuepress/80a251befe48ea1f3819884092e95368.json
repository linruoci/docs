{"remainingRequest":"D:\\myweb\\vuepress-starter\\node_modules\\babel-loader\\lib\\index.js??ref--3-1!D:\\myweb\\vuepress-starter\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??ref--6!D:\\myweb\\vuepress-starter\\node_modules\\cache-loader\\dist\\cjs.js??ref--1-0!D:\\myweb\\vuepress-starter\\node_modules\\vue-loader\\lib\\index.js??ref--1-1!D:\\myweb\\vuepress-starter\\node_modules\\@vuepress\\markdown-loader\\index.js??ref--1-2!D:\\myweb\\vuepress-starter\\docs\\product\\BlueToothWatch3.md?vue&type=template&id=9758ed22&","dependencies":[{"path":"D:\\myweb\\vuepress-starter\\docs\\product\\BlueToothWatch3.md","mtime":1681819421514},{"path":"D:\\myweb\\vuepress-starter\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1680790926664},{"path":"D:\\myweb\\vuepress-starter\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1680790926664},{"path":"D:\\myweb\\vuepress-starter\\node_modules\\babel-loader\\lib\\index.js","mtime":1680790928752},{"path":"D:\\myweb\\vuepress-starter\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1680790929703},{"path":"D:\\myweb\\vuepress-starter\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1680790926664},{"path":"D:\\myweb\\vuepress-starter\\node_modules\\vue-loader\\lib\\index.js","mtime":1680790929703},{"path":"D:\\myweb\\vuepress-starter\\node_modules\\@vuepress\\markdown-loader\\index.js","mtime":1680790928158}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}